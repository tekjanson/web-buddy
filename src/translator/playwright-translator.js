/* playwright-translator.js
   Simple Playwright (JS) translator producing a test scaffold and a sequence of
   Playwright commands. Exports as `translators.playwright` in browser and as
   `module.exports.translator` for Node/CommonJS.
*/
(function (root, factory) {
  if (typeof module !== 'undefined' && module.exports) {
    module.exports.translator = factory();
  } else {
    try {
      root.translators = root.translators || {};
      root.translators.playwright = factory();
    } catch (e) {}
  }
}(typeof globalThis !== 'undefined' ? globalThis : this, function () {
  function escapeJs(s) { return String(s || '').replace(/'/g, "\\'"); }

  function xpathToLocator(xpath) {
    // prefer using xpath via page.locator('xpath=...') for fidelity
    if (!xpath) return "''";
    return `xpath='${escapeJs(xpath)}'`;
  }

  function buildAction(a) {
    if (!a || !a.type) return '';
    switch (a.type) {
      case 'url': return `await page.goto('${escapeJs(a.path || '')}');`;
      case 'click': return `await page.locator(${xpathToLocator(a.path)}).click();`;
      case 'change': return `await page.locator(${xpathToLocator(a.path)}).fill('${escapeJs(a.value || '')}');`;
      case 'select': return `await page.locator(${xpathToLocator(a.path)}).selectOption('${escapeJs(a.value || '')}');`;
      case 'hover': return `await page.locator(${xpathToLocator(a.path)}).hover();`;
      default: return `// unsupported action: ${a.type}`;
    }
  }

  return {
    generateOutput(list = []) {
      try {
        if (!Array.isArray(list) || list.length === 0) return '';
        const lines = [
          '// Playwright script generated by Web Buddy',
          "const { test, expect } = require('@playwright/test');",
          ''
        ];

        lines.push("test('recorded', async ({ page }) => {");
        list.forEach((a) => {
          const l = buildAction(a);
          if (l) lines.push('  ' + l);
        });

        lines.push('});');
        return lines.join('\n');
      } catch (e) {
        return '';
      }
    },
    generateFile(list = [], maxLength, demo, verify, libSource = []) {
      // produce a minimal Playwright test file
      const out = this.generateOutput(list, maxLength, demo, verify);
      return out;
    }
  };
}));
