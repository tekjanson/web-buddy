/*
  Cypress translator
  Produces Cypress test commands (assuming cypress-xpath plugin is available).
  Improved: safer escaping, verify/demo options, better formatting, UMD-style export.
*/

(function rootFactory(root, factory) {
  if (typeof module !== 'undefined' && module.exports) {
    module.exports.translator = factory();
    return;
  }
  if (typeof root.translators === 'undefined') root.translators = {};
  root.translators.cypress = factory();
}(typeof globalThis !== 'undefined' ? globalThis : this, function createTranslator() {
  'use strict';

  const DEFAULT_WAIT_MS = 300;

  function escapeForSingleQuoteJs(s) {
    if (typeof s !== 'string') return s;
    return s.replace(/\\/g, '\\').replace(/'/g, "\\'");
  }

  function normalizeXPath(path) {
    if (!path) return '';
    // Remove leading 'xpath=' if present
    if (path.indexOf('xpath=') === 0) return path.slice(6);
    return path;
  }

  function buildElementChain(path) {
    // Use cy.xpath(...) as the entry point (requires cypress-xpath plugin in user's test)
    return `cy.xpath('${escapeForSingleQuoteJs(path)}')`;
  }

  function buildActionForAttr(attr) {
    if (!attr) return '';
    if (attr.type === 'pomer') {
      // represent pomer as a comment block with arguments
      let out = `// POMER: ${attr.trigger}`;
      for (let i = 0; i < (attr.arguments || []).length; i++) out += ` ${String(attr.arguments[i])}`;
      return out;
    }

    if (attr.type === 'url') return `cy.visit('${escapeForSingleQuoteJs(attr.path)}');`;

    const rawPath = normalizeXPath(attr.path || '');
    const base = buildElementChain(rawPath);
    switch ((attr.type || '').toLowerCase()) {
      case 'hover':
        return `${base}.trigger('mouseover');`;
      case 'select':
        return `${base}.select('${escapeForSingleQuoteJs(attr.value || '')}');`;
      case 'text':
      case 'file':
        // .clear().type(...) to be explicit
        return `${base}.clear().type('${escapeForSingleQuoteJs(attr.value || '')}');`;
      case 'a':
      case 'button':
      default:
        return `${base}.click();`;
    }
  }

  function generateVerifyCommand(attr) {
    if (!attr || !attr.path) return null;
    const path = normalizeXPath(attr.path);
    return `cy.xpath('${escapeForSingleQuoteJs(path)}').should('exist');`;
  }

  const translator = {
    generateOutput(list, length = 1000, demo = false, verify = false) {
      const lines = [];
      for (let i = 0; i < (list || []).length && i < length; i++) {
        const item = list[i];
        if (verify && item.path) {
          lines.push(generateVerifyCommand(item));
        }
        const cmd = buildActionForAttr(item);
        if (cmd) lines.push(cmd);
        if (demo) lines.push(`cy.wait(${DEFAULT_WAIT_MS});`);
      }
      return lines.join('\n');
    },

    generateFile(list, length = 1000, demo = false, verify = false, /* source */) {
  const title = (list && list[0] && list[0].title) ? escapeForSingleQuoteJs(list[0].title) : 'Web Buddy Test';
      const body = this.generateOutput(list, length, demo, verify)
        .split('\n')
        .map(l => (l ? `    ${l}` : l))
        .join('\n');

      // Minimal Cypress test file. Note: user may need to install cypress-xpath plugin.
  return `// Generated by Web Buddy - Cypress test\n// Requires cypress-xpath plugin if using xpath selectors\n\ndescribe('${title}', () => {\n  it('${title} test', () => {\n${body}\n  });\n});\n`;
    },

    // Helper to create a programmatic action array (lightweight)
    generateActions(list, options) {
      return (list || [])
        .filter(e => e && e.type !== 'url')
        .map(e => ({
          action: (e.trigger || e.action || 'unknown'),
          path: e.path || e.xpath || null,
          value: e.value || e.text || null,
          time: e.time || Date.now()
        }));
    }
  };

  return translator;
}));
